{"version":3,"file":"static/js/54.8319849d.chunk.js","mappings":"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","sources":["assets/icons/save.svg","webpack://nola/./src/components/Banners/Banners.module.css?97db","components/Banners/Banners.jsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","assets/icons/arrow-right.svg","webpack://nola/./src/components/Posts/Posts.module.css?b837","components/Posts/Posts.jsx","../node_modules/react-intersection-observer/src/useInView.tsx","services/Toastify/Toastify.js","services/hooks/useSavePost.js"],"sourcesContent":["var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSave(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 20 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.55068 2.01L5.55109 2.00979C6.01674 1.77202 6.54903 1.65701 7.25204 1.59865C7.94719 1.54237 8.82034 1.54199 9.97036 1.54199H9.9987H10.027C11.1774 1.54199 12.0504 1.54238 12.7452 1.59948L12.7454 1.59949C13.4483 1.657 13.9806 1.77199 14.4463 2.0098L14.4467 2.01C15.2543 2.42147 15.9109 3.07805 16.3224 3.88565L16.3226 3.88605C16.5605 4.35195 16.6762 4.88441 16.7337 5.58654C16.79 6.28176 16.7904 7.15504 16.7904 8.30533V18.3336C16.7904 18.3549 16.7849 18.3759 16.7746 18.3945C16.7642 18.4131 16.7492 18.4287 16.7311 18.44C16.713 18.4512 16.6923 18.4575 16.671 18.4585C16.6498 18.4595 16.6288 18.455 16.6098 18.4456C16.6097 18.4456 16.6096 18.4455 16.6095 18.4455L14.7131 17.4973C12.9583 16.6199 12.101 16.1923 11.2048 16.0247C10.4077 15.8751 9.58971 15.8751 8.7926 16.0247C7.8964 16.1923 7.03911 16.6199 5.28426 17.4973L3.38787 18.4446C3.36882 18.4542 3.34766 18.4586 3.3264 18.4577C3.30513 18.4567 3.28447 18.4503 3.26635 18.4392C3.24824 18.428 3.23329 18.4124 3.22291 18.3938C3.21256 18.3752 3.2071 18.3544 3.20703 18.3332V8.30533C3.20703 7.15493 3.20742 6.28198 3.26452 5.58711L3.26453 5.58693C3.32204 4.88408 3.43703 4.35174 3.67483 3.88605L3.67504 3.88565C4.08651 3.07805 4.74309 2.42147 5.55068 2.01Z\",\n    stroke: \"black\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSave);\nexport default __webpack_public_path__ + \"static/media/save.f86939ed2359f1d5b9e8a10654878077.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"Banners_img__v5X+d\"};","import css from \"./Banners.module.css\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport \"swiper/css\";\r\nimport \"swiper/css/effect-coverflow\";\r\nimport \"swiper/css/pagination\";\r\nimport \"swiper/css/navigation\";\r\nimport { Autoplay, EffectCoverflow, Navigation, Pagination } from \"swiper/modules\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Banners = ({ key, banner }) => {\r\n  return (\r\n    <>\r\n      {banner &&\r\n        [banner]?.map(( banners ) => (\r\n          <>\r\n            <Swiper\r\n              slidesPerView={1}\r\n              spaceBetween={30}\r\n              loop={true}\r\n              autoplay={{\r\n              delay: 3000, \r\n              disableOnInteraction: false, // Продолжать после ручного переключения\r\n            }}\r\n              pagination={{ el: \".swiper-pagination\", clickable: true }}\r\n              navigation={{\r\n                nextEl: \".swiper-button-next\",\r\n                prevEl: \".swiper-button-prev\",\r\n                clickable: true,\r\n              }}\r\n              modules={[EffectCoverflow, Pagination, Navigation, Autoplay]}\r\n              className={css.swiper_container}\r\n            >\r\n              {banners[0] && (\r\n                <SwiperSlide\r\n                  key={banners[0]}\r\n                  style={{\r\n                    width: \"80%\",\r\n                  }}\r\n                  className={css.swiper_slide}\r\n                >\r\n                  <img src={banners[0]} alt=\"\" className={css.img} />\r\n                </SwiperSlide>\r\n              )}\r\n\r\n              {banners[1] && (\r\n                <SwiperSlide\r\n                  key={banners[1]}\r\n                  style={{\r\n                    width: \"80%\",\r\n                  }}\r\n                  className={css.swiper_slide}\r\n                >\r\n                  <img src={banners[1]} alt=\"\" className={css.img} />\r\n                </SwiperSlide>\r\n              )}\r\n\r\n              {banners[2] && (\r\n                <SwiperSlide\r\n                  key={banners[2]}\r\n                  style={{\r\n                    width: \"80%\",\r\n                  }}\r\n                  className={css.swiper_slide}\r\n                >\r\n                  <img src={banners[2]} alt=\"\" className={css.img} />\r\n                </SwiperSlide>\r\n              )}\r\n\r\n              <div className=\"slider-controler\">\r\n                <div\r\n                  className=\"swiper-button-prev slider-arrow\"\r\n                  style={{ color: \"transparent\" }}\r\n                ></div>\r\n                <div\r\n                  className=\"swiper-button-next slider-arrow\"\r\n                  style={{ color: \"transparent\" }}\r\n                ></div>\r\n\r\n                <div\r\n                  className=\"swiper-pagination\"\r\n                  style={{\r\n                    position: \"relative\",\r\n                    bottom: \"2px\",\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </Swiper>\r\n          </>\r\n        ))}\r\n    </>\r\n\r\n    // <>\r\n    //   <Swiper\r\n    //     slidesPerView={1}\r\n    //     spaceBetween={30}\r\n    //     loop={true}\r\n    //     pagination={{ el: \".swiper-pagination\", clickable: true }}\r\n    //     navigation={{\r\n    //       nextEl: \".swiper-button-next\",\r\n    //       prevEl: \".swiper-button-prev\",\r\n    //       clickable: true,\r\n    //     }}\r\n    //     modules={[EffectCoverflow, Pagination, Navigation]}\r\n    //     className={css.swiper_container}\r\n    //   >\r\n    //     {banners[0] && (\r\n    //       <SwiperSlide\r\n    //         style={{\r\n    //           width: \"80%\",\r\n    //         }}\r\n    //         className={css.swiper_slide}\r\n    //       >\r\n    //         {console.log(banners)}\r\n    //         <img src={banners[0]} alt=\"\" className={css.img} />\r\n    //       </SwiperSlide>\r\n    //     )}\r\n\r\n    //     {banners[1] && (\r\n    //       <SwiperSlide\r\n    //         style={{\r\n    //           width: \"80%\",\r\n    //         }}\r\n    //         className={css.swiper_slide}\r\n    //       >\r\n    //         {console.log(banners)}\r\n    //         <img src={banners[1]} alt=\"\" className={css.img} />\r\n    //       </SwiperSlide>\r\n    //     )}\r\n\r\n    //     {banners[2] && (\r\n    //       <SwiperSlide\r\n    //         style={{\r\n    //           width: \"80%\",\r\n    //         }}\r\n    //         className={css.swiper_slide}\r\n    //       >\r\n    //         {console.log(banners)}\r\n    //         <img src={banners[2]} alt=\"\" className={css.img} />\r\n    //       </SwiperSlide>\r\n    //     )}\r\n    //     {/* // ))} */}\r\n    //     <div className=\"slider-controler\">\r\n    //       <div\r\n    //         className=\"swiper-button-prev slider-arrow\"\r\n    //         style={{ color: \"transparent\" }}\r\n    //       ></div>\r\n    //       <div\r\n    //         className=\"swiper-button-next slider-arrow\"\r\n    //         style={{ color: \"transparent\" }}\r\n    //       ></div>\r\n\r\n    //       <div\r\n    //         className=\"swiper-pagination\"\r\n    //         style={{\r\n    //           position: \"relative\",\r\n    //           bottom: \"2px\",\r\n    //         }}\r\n    //       ></div>\r\n    //     </div>\r\n    //   </Swiper>\r\n    // </>\r\n  );\r\n};\r\n\r\nBanners.propTypes = {\r\n  key: PropTypes.string,\r\n  banner: PropTypes.object,\r\n};\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","var _path, _path2;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowRight(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 12H7\",\n    stroke: \"black\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13 8L17 12L13 16\",\n    stroke: \"black\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowRight);\nexport default __webpack_public_path__ + \"static/media/arrow-right.d777e3e9e1fe9756c2fe9ad90e80dc12.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"Posts_img__a5M8m\",\"card\":\"Posts_card__vneTg\",\"title\":\"Posts_title__i7Aaw\",\"post_header\":\"Posts_post_header__tUfKH\",\"footer\":\"Posts_footer__6yHbi\",\"icon\":\"Posts_icon__K2EG3\",\"footer_title\":\"Posts_footer_title__iWUnv\",\"footer_left\":\"Posts_footer_left__RCvJF\",\"footer_action\":\"Posts_footer_action__O9cvc\",\"count\":\"Posts_count__qvtN6\",\"action\":\"Posts_action__jhq0d\",\"save_btn\":\"Posts_save_btn__M6e3b\",\"iconSaveDark\":\"Posts_iconSaveDark__4NAmh\",\"iconSave\":\"Posts_iconSave__DlEsX\",\"iconDark\":\"Posts_iconDark__HvI3J\"};","import { useInView } from \"react-intersection-observer\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ReactComponent as Save_Icon } from \"../../assets/icons/save.svg\";\r\nimport { ReactComponent as UpLeft_Icon } from \"../../assets/icons/arrow-right.svg\";\r\n\r\nimport css from \"./Posts.module.css\";\r\nimport { NavLink, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\n// import { prominent } from \"color.js\";\r\nimport { useCustomContext } from \"../../services/Context/Context\";\r\nimport { useSavePost } from \"../../services/hooks/useSavePost\";\r\nimport { Banners } from \"../Banners/Banners\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport const Posts = ({ post, handleSavePost, savedPost, elementId }) => {\r\n  const {\r\n    id,\r\n    banners: url,\r\n    title,\r\n    callToAction,\r\n    advertiser,\r\n    callToActionLinks,\r\n  } = post;\r\n\r\n  const { theme, postsId, setPostsId } = useCustomContext();\r\n  const { isDisabled } = useSavePost();\r\n\r\n  const location = useLocation();\r\n  const targetRef = useRef();\r\n  const { ref: inViewRef } = useInView();\r\n  const setRefs = useCallback(\r\n    (node) => {\r\n      targetRef.current = node;\r\n      inViewRef(node);\r\n    },\r\n    [inViewRef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (postsId === id) {\r\n      targetRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n      return;\r\n    }\r\n    setPostsId(\"\");\r\n  }, [id, postsId, setPostsId]);\r\n\r\n  return (\r\n    <li id={elementId} ref={setRefs} className={`${css.card} ${css.container}`}>\r\n      <div\r\n        className={`${css.post_header} ${theme === \"dark\" ? css.iconDark : \"\"}`}\r\n      >\r\n        <div\r\n          className={`${css.footer} ${theme === \"dark\" ? css.iconDark : \"\"}`}\r\n        >\r\n          <NavLink\r\n            to={`/${advertiser.id}`}\r\n            // state={{ from: location }}\r\n            state={{ postId: post.id }}\r\n            className={css.footer_left}\r\n          >\r\n            <img\r\n              src={advertiser.profile_picture?.replace(\"image/upload/\", \"\")}\r\n              alt=\"\"\r\n              className={css.icon}\r\n            />\r\n            <h3 className={`${css.footer_title} dark:text-white`}>{title}</h3>\r\n          </NavLink>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleSavePost}\r\n            className={css.save_btn}\r\n            disabled={isDisabled}\r\n          >\r\n            {!savedPost ? (\r\n              <Save_Icon />\r\n            ) : (\r\n              <div\r\n                className={theme === \"dark\" ? css.iconSaveDark : css.iconSave}\r\n              >\r\n                <Save_Icon />\r\n              </div>\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        <span className={`${css.line} dark:bg-white`} />\r\n\r\n        <NavLink to={`/main/${id}`} className={css.img}>\r\n          <img src={url[0] || url[1] || url[2]} alt=\"\" className={css.img} />\r\n        </NavLink>\r\n\r\n        <div className={css.footer_action}>\r\n          <NavLink\r\n            to={`${callToActionLinks}`}\r\n            target=\"blank\"\r\n            className={`${css.action} dark:text-white`}\r\n          >\r\n            {callToAction}\r\n          </NavLink>\r\n          <NavLink to={`${callToActionLinks}`} target=\"blank\">\r\n            <UpLeft_Icon />\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\n// export const Posts = ({ id, url, title, handleSavePost, savedPost, callToAction, advertiser\r\n//  }) => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const targetRef = useRef();\r\n//   // const ref = useRef()\r\n//   const { theme, setTheme } = useCustomContext();\r\n//   const { postsId, setPostsId } = useCustomContext();\r\n\r\n//   // const { ref, inView , entry} = useInView({\r\n//   //   threshold: 0,\r\n//   //   triggerOnce: true,\r\n//   // });\r\n//   const { ref: inViewRef, inView } = useInView();\r\n\r\n//   const setRefs = useCallback(\r\n//     (node) => {\r\n//       //  ref.current = node\r\n//       targetRef.current = node;\r\n//       inViewRef(node);\r\n//     },\r\n//     [inViewRef]\r\n//   );\r\n\r\n//   // const useMergedRef = (...refs) => {\r\n//   //   return useCallback(\r\n//   //     (node) => {\r\n//   //       refs.forEach((ref) => {\r\n//   //         if (typeof ref === \"function\") {\r\n//   //           ref(node);\r\n//   //         } else if (ref !== null) {\r\n//   //           ref.current = node;\r\n//   //         }\r\n//   //       });\r\n//   //     },\r\n//   //     [refs]\r\n//   //   );\r\n//   // };\r\n//   // const mergedRef = useMergedRef(targetRef, inViewRef);\r\n\r\n//   useEffect(() => {\r\n//     if (postsId === id) {\r\n//       targetRef?.current?.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n//       return;\r\n//     }\r\n\r\n//     setPostsId(\"\");\r\n//   }, [id, location, navigate, postsId, setPostsId]);\r\n\r\n//   // const [getColor, setGetColor] = useState(\"\");\r\n//   // const [getBackColor, setGetBackColor] = useState(\"\");\r\n\r\n//   // useEffect(() => {\r\n//   //   prominent(url, { format: \"hex\" })\r\n//   //   .then(color => {\r\n//   //     setGetColor(color[2])\r\n//   //     setGetBackColor(color[0])\r\n//   //   })\r\n//   //     .catch((error) => console.log(error));\r\n//   // }, [url]);\r\n\r\n//   return (\r\n//     <li ref={targetRef} className={`${css.card} ${css.container}`}>\r\n//       {/* {inView && ( */}\r\n//       <>\r\n//         <div\r\n//           className={`${css.post_header}  ${\r\n//             theme === \"dark\" ? css.iconDark : \"\"\r\n//           }`}\r\n//         >\r\n//           <div\r\n//             className={`${css.footer}  ${theme === \"dark\" ? css.iconDark : \"\"}`}\r\n//           >\r\n//             <NavLink\r\n//               to={`/${advertiser.id}`}\r\n//               state={{ from: location }}\r\n//               className={css.footer_left}\r\n//             >\r\n//               <img\r\n//                 src={advertiser?.profile_picture?.replace(\"image/upload/\", \"\")}\r\n//                 alt=\"\"\r\n//                 className={css.icon}\r\n//               />\r\n//               <h3 className={`${css.footer_title} dark:text-white`}>{title}</h3>\r\n//             </NavLink>\r\n\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => handleSavePost(id)}\r\n//               className={css.save_btn}\r\n//             >\r\n//               {!savedPost?.includes(id) ? (\r\n//                 <Save_Icon />\r\n//               ) : (\r\n//                 <div\r\n//                   className={theme === \"dark\" ? css.iconSaveDark : css.iconSave}\r\n//                 >\r\n//                   <Save_Icon />\r\n//                 </div>\r\n//               )}\r\n//             </button>\r\n//           </div>\r\n//           <span className={`${css.line} dark:bg-white`}></span>\r\n\r\n//           <img src={url[0]} alt=\"\" className={css.img} />\r\n\r\n//           {/* <div>\r\n//                 <div\r\n//                   className={css.action}\r\n//                   style={{\r\n//                     backgroundColor: getBackColor ? getBackColor : \"#faf5f5\",\r\n//                     color: getColor ? getColor : \"#080808\"\r\n//                   }}\r\n//                 >\r\n//                   Learn more\r\n//                 </div>\r\n//               </div> */}\r\n\r\n//           <div className={css.footer_action}>\r\n//             <NavLink\r\n//               to={`${id}`}\r\n//               // state={{ from: location }}\r\n//               className={`${css.action} dark:text-white`}\r\n//             >\r\n//                {callToAction}\r\n//             </NavLink>\r\n//             <NavLink\r\n//               to={`${id}`}\r\n//               // state={{ from: location }}\r\n//             >\r\n//               <UpLeft_Icon />\r\n//             </NavLink>\r\n//           </div>\r\n//         </div>\r\n//       </>\r\n//       {/* )} */}\r\n//     </li>\r\n//   );\r\n// };\r\n\r\nPosts.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n    banners: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    callToAction: PropTypes.string,\r\n    callToActionLinks: PropTypes.string,\r\n    advertiser: PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n      profile_picture: PropTypes.string,\r\n    }).isRequired,\r\n  }).isRequired,\r\n\r\n  handleSavePost: PropTypes.func.isRequired,\r\n\r\n  savedPost: PropTypes.bool.isRequired,\r\n  elementId: PropTypes.string,\r\n  // url: PropTypes.array,\r\n  // title: PropTypes.string,\r\n  // id: PropTypes.number,\r\n  // handleSavePost: PropTypes.func,\r\n  // savedPost: PropTypes.array,\r\n  //   callToAction: PropTypes.string,\r\n  // advertiser: PropTypes.object,\r\n};\r\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nlet isToastActive = false;\r\n\r\nexport const Toastify = (message) => {\r\n  if (isToastActive) return;\r\n\r\n  isToastActive = true;\r\n\r\n  toast(`${message}`, {\r\n    onClose: () => {\r\n      isToastActive = false;\r\n    },\r\n    position: \"top-right\",\r\n    autoClose: 2500,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { ToastError } from \"../ToastError/ToastError\";\r\nimport {\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n  postUnsavePostApi,\r\n} from \"../https/https\";\r\nimport { Toastify } from \"../Toastify/Toastify\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport function useSavePost() {\r\n  const { token } = useAuth();\r\n\r\n  const isGuestRef = useRef(true); // ← Инициализация ref\r\n  const disabledRef = useRef(false);\r\n\r\n  const [savedPostIds, setSavedPostIds] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n  });\r\n\r\n  const [savedPosts, setSavedPosts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n  });\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  // 💡 Определяем, был ли пользователь гостем\r\n  useEffect(() => {\r\n    try {\r\n      const raw = localStorage.getItem(\"persist:auth\");\r\n      if (!raw) {\r\n        isGuestRef.current = true;\r\n        return;\r\n      }\r\n\r\n      const parsed = JSON.parse(raw);\r\n      const persistedToken = parsed.token ? JSON.parse(parsed.token) : null;\r\n\r\n      isGuestRef.current = !persistedToken;\r\n    } catch (e) {\r\n      isGuestRef.current = true;\r\n    }\r\n  }, []);\r\n\r\n  // 🔁 Синхронизация при логине или очистка при logout\r\n  useEffect(() => {\r\n    if (!token) {\r\n      if (!isGuestRef.current) {\r\n        // logout\r\n        setSavedPostIds([]);\r\n        setSavedPosts([]);\r\n\r\n        localStorage.removeItem(\"savedPostId\");\r\n        localStorage.removeItem(LOKAL_KEY);\r\n        window.location.reload();\r\n      }\r\n      localStorage.setItem(\"savedPostId\", JSON.stringify([]));\r\n      localStorage.setItem(LOKAL_KEY, JSON.stringify([]));\r\n      return;\r\n    }\r\n\r\n    // Если вошёл — синхронизируем\r\n    (async () => {\r\n      try {\r\n        const serverPosts = await getSavePostApi();\r\n        const serverIds = serverPosts.map((p) => p.id);\r\n\r\n        const localSavedPosts =\r\n          JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n        const postsToSync = localSavedPosts.filter(\r\n          (post) => !serverIds.includes(post.id)\r\n        );\r\n\r\n        for (const post of postsToSync) {\r\n          try {\r\n            await postSavePostApi(post.id, post);\r\n          } catch (err) {\r\n            console.error(`Ошибка синхронизации поста ID=${post.id}`, err);\r\n          }\r\n        }\r\n\r\n        const updatedIds = [\r\n          ...new Set([...serverIds, ...postsToSync.map((p) => p.id)]),\r\n        ];\r\n        setSavedPostIds(updatedIds);\r\n        setSavedPosts([]);\r\n\r\n        localStorage.removeItem(\"savedPostId\");\r\n        localStorage.removeItem(LOKAL_KEY);\r\n      } catch (err) {\r\n        ToastError(err?.message);\r\n      }\r\n    })();\r\n  }, [token]);\r\n\r\n  // 💾 Сохраняем в localStorage только если пользователь — гость\r\n  useEffect(() => {\r\n    if (!token && isGuestRef.current) {\r\n      localStorage.setItem(\"savedPostId\", JSON.stringify(savedPostIds));\r\n      localStorage.setItem(LOKAL_KEY, JSON.stringify(savedPosts));\r\n    }\r\n  }, [savedPostIds, savedPosts, token]);\r\n\r\n  const toggleSave = useCallback(\r\n    async (post) => {\r\n      const postId = post.id;\r\n\r\n      if (token) {\r\n        try {\r\n          if (savedPostIds.includes(postId)) {\r\n            await postUnsavePostApi(postId);\r\n            ToastError(\"Post has been deleted\");\r\n            setSavedPostIds((ids) => ids.filter((id) => id !== postId));\r\n          } else {\r\n            await postSavePostApi(postId, {});\r\n            Toastify(\"Post successfully saved\");\r\n            setSavedPostIds((ids) => [...ids, postId]);\r\n          }\r\n        } catch (err) {\r\n          ToastError(err?.message);\r\n        }\r\n      } else {\r\n        // Гость\r\n        setSavedPostIds((ids) =>\r\n          ids.includes(postId)\r\n            ? ids.filter((id) => id !== postId)\r\n            : [...ids, postId]\r\n        );\r\n\r\n        setSavedPosts((posts) => {\r\n          const exists = posts.some((p) => p.id === postId);\r\n          if (exists) {\r\n            ToastError(\"Post has been deleted\");\r\n            return posts.filter((p) => p.id !== postId);\r\n          } else {\r\n            Toastify(\"Post successfully saved\");\r\n            return [...posts, post];\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [token, savedPostIds, savedPosts]\r\n  );\r\n\r\n  const isSaved = useCallback(\r\n    (postId) => savedPostIds.includes(postId),\r\n    [savedPostIds]\r\n  );\r\n\r\n  return {\r\n    savedPostIds,\r\n    savedPosts,\r\n    isSaved,\r\n    toggleSave,\r\n    isDisabled,\r\n    setIsDisabled,\r\n  };\r\n}\r\n"],"names":["_path","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgSave","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","stroke","ForwardRef","Banners","_ref2","key","banner","_jsx","_Fragment","children","map","banners","_jsxs","Swiper","slidesPerView","spaceBetween","loop","autoplay","delay","disableOnInteraction","pagination","el","clickable","navigation","nextEl","prevEl","modules","EffectCoverflow","Pagination","Navigation","Autoplay","className","css","swiper_container","SwiperSlide","style","swiper_slide","src","alt","img","color","position","bottom","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","keys","sort","filter","root","has","set","toString","get","observe","element","callback","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","_path2","SvgArrowRight","strokeWidth","strokeLinecap","strokeLinejoin","Posts","_advertiser$profile_p","post","handleSavePost","savedPost","elementId","url","callToAction","advertiser","callToActionLinks","theme","postsId","setPostsId","useCustomContext","isDisabled","useSavePost","targetRef","useLocation","useRef","inViewRef","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","setRefs","useCallback","node","useEffect","_targetRef$current","scrollIntoView","behavior","card","container","post_header","iconDark","footer","NavLink","to","postId","footer_left","profile_picture","replace","icon","footer_title","type","onClick","save_btn","disabled","iconSaveDark","iconSave","Save_Icon","line","footer_action","action","UpLeft_Icon","isToastActive","Toastify","message","toast","onClose","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","LOKAL_KEY","token","useAuth","isGuestRef","savedPostIds","setSavedPostIds","useState","_JSON$parse","JSON","parse","localStorage","getItem","savedPosts","setSavedPosts","_JSON$parse2","setIsDisabled","raw","parsed","persistedToken","removeItem","location","reload","setItem","stringify","_JSON$parse3","serverIds","getSavePostApi","p","postsToSync","includes","postSavePostApi","err","console","error","updatedIds","Set","ToastError","toggleSave","async","postUnsavePostApi","ids","posts","isSaved"],"sourceRoot":""}