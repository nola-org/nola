{"version":3,"file":"static/js/759.186d3051.chunk.js","mappings":"wIACA,QAAiC,iCAAjC,EAAmF,iCAAnF,EAA4I,wCAA5I,EAAiN,6CAAjN,EAAqQ,uBAArQ,EAAuS,2B,+GCevS,MAEaA,EAAWA,KACtB,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,MACZ,MAAEC,IAAUC,EAAAA,EAAAA,MACZ,QAAEC,EAAO,WAAEC,IAAeF,EAAAA,EAAAA,MAEzBG,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAE5CG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,KAC1BK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAEjC,QAAEO,EAAO,WAAEC,IAAeC,EAAAA,EAAAA,KA2BhC,OAxBAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnB,MAAMC,EAAYC,SAASC,gBAAgBF,UAC3Cb,EAAea,EAAYX,GAC3BC,EAAiBU,GAAa,EAAI,EAAIA,EAAU,EAGlD,OADAG,OAAOC,iBAAiB,SAAUL,GAC3B,IAAMI,OAAOE,oBAAoB,SAAUN,EAAa,GAC9D,CAACV,KAEJS,EAAAA,EAAAA,YAAU,KACRJ,GAAW,GACX,WACE,IACE,MAAQH,KAAMe,SAAeC,EAAAA,EAAAA,MAC7Bf,EAAQc,EAAKE,QACf,CAAE,OACAC,EAAAA,EAAAA,GAAW,mBACb,CAAC,QACCf,GAAW,EACb,CACD,EATD,EASI,GACH,KAGDgB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,KAEfD,EAAAA,EAAAA,KAAA,OACEH,UAAW,GAAGC,KACF,SAAV9B,EAAmB8B,EAAe,MAChC1B,EAAc0B,EAA4B,MAC5C1B,GAAyB,SAAVJ,EAAmB8B,EAAiC,KAClEC,UAEHC,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAASC,SAAC,WAGzBpB,IACCqB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,SAAQE,UACrBC,EAAAA,EAAAA,KAACE,EAAAA,EAAY,OAIjBF,EAAAA,EAAAA,KAAA,MAAAD,SACGtB,IACK,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM0B,KAAKC,IACTJ,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CAEJD,KAAMA,EACNE,eAAgBA,IAAMxB,EAAWsB,GACjCG,UAAW1B,EAAQuB,EAAKI,IACxBC,UAAWvC,GAJNkC,EAAKI,WAQd,EAmRV,G","sources":["webpack://nola/./src/pages/MainPage/MainPage.module.css?04b3","pages/MainPage/MainPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main_container\":\"MainPage_main_container__E8LTI\",\"logo_container\":\"MainPage_logo_container__p9MBj\",\"logo_container_active\":\"MainPage_logo_container_active__GxncV\",\"logo_container_active_dark\":\"MainPage_logo_container_active_dark__xo2Iw\",\"logo\":\"MainPage_logo__flV1m\",\"iconDark\":\"MainPage_iconDark__FZGF9\"};","import css from \"./MainPage.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../../services/hooks/useAuth\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Posts } from \"../../components/Posts/Posts\";\r\nimport {\r\n  getAllPostApi,\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n} from \"../../services/https/https\";\r\nimport { LoaderSpiner } from \"../../services/loaderSpinner/LoaderSpinner\";\r\nimport { useCustomContext } from \"../../services/Context/Context\";\r\nimport { useSavePost } from \"../../services/hooks/useSavePost\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport const MainPage = () => {\r\n  const { token } = useAuth();\r\n  const { theme } = useCustomContext();\r\n  const { postsId, setPostsId } = useCustomContext();\r\n\r\n  const [isScrollTop, setIsScrollTop] = useState(true);\r\n  const [lastScrollTop, setLastScrollTop] = useState(0);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { isSaved, toggleSave } = useSavePost();\r\n\r\n  // Скролл-хедер\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const scrollTop = document.documentElement.scrollTop;\r\n      setIsScrollTop(scrollTop < lastScrollTop);\r\n      setLastScrollTop(scrollTop <= 0 ? 0 : scrollTop);\r\n    };\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, [lastScrollTop]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    (async () => {\r\n      try {\r\n        const { data: resp } = await getAllPostApi();\r\n        setData(resp.results);\r\n      } catch {\r\n        ToastError(\"Error! Try later\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={css.main_container}>\r\n      <ToastContainer />\r\n\r\n      <div\r\n        className={`${css.logo_container} ${\r\n          theme === \"dark\" ? css.iconDark : \"\"\r\n        } ${isScrollTop ? css.logo_container_active : \"\"} ${\r\n          isScrollTop && theme === \"dark\" ? css.logo_container_active_dark : \"\"\r\n        }`}\r\n      >\r\n        <p className={css.logo}>NOLA</p>\r\n      </div>\r\n\r\n      {loading && (\r\n        <div className=\"loader\">\r\n          <LoaderSpiner />\r\n        </div>\r\n      )}\r\n\r\n      <ul>\r\n        {data &&\r\n          data?.map((post) => (\r\n            <Posts\r\n              key={post.id}\r\n              post={post}\r\n              handleSavePost={() => toggleSave(post)}\r\n              savedPost={isSaved(post.id)}\r\n              elementId={postsId}\r\n            />\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// export const MainPage = () => {\r\n//   const { token } = useAuth();\r\n//   const { theme } = useCustomContext();\r\n//   const [isScrollTop, setIsScrollTop] = useState(true);\r\n//   const [lastScrollTop, setLastScrollTop] = useState(0);\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const { isSaved, toggleSave } = useSavePost();\r\n\r\n//     useEffect(() => {\r\n//     const handleScroll = () => {\r\n//       const scrollTop = document.documentElement.scrollTop;\r\n\r\n//       if (scrollTop < lastScrollTop) {\r\n//         setIsScrollTop(true);\r\n//       } else {\r\n//         setIsScrollTop(false);\r\n//       }\r\n//       setLastScrollTop(scrollTop <= 0 ? 0 : scrollTop);\r\n//     };\r\n//     window.addEventListener(\"scroll\", handleScroll);\r\n//     return () => {\r\n//       window.removeEventListener(\"scroll\", handleScroll);\r\n//     };\r\n//   }, [lastScrollTop]);\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     const fetchData = (async () => {\r\n//       try {\r\n//         const { data } = await getAllPostApi();\r\n\r\n//         setData(data.results);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         ToastError(\"Error! Try later\");\r\n//       }\r\n//     })();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className={css.main_container}>\r\n//             <ToastContainer />\r\n\r\n//       <div\r\n//         className={`${css.logo_container} ${\r\n//           theme === \"dark\" ? css.iconDark : \"\"\r\n//         } ${isScrollTop ? css.logo_container_active : \"\"} ${\r\n//           isScrollTop && theme === \"dark\" ? css.logo_container_active_dark : \"\"\r\n//         }`}\r\n//       >\r\n//         <p className={css.logo}>NOLA</p>\r\n//       </div>\r\n//       {loading && (\r\n//         <div className=\"loader\">\r\n//           <LoaderSpiner />\r\n//         </div>\r\n//       )}\r\n//           <ul>\r\n//       {data &&\r\n//         data?.map(({ id, title, banners, callToAction, advertiser }) => (\r\n//           <Posts\r\n//             key={id}\r\n//             data={data}\r\n//             url={banners}\r\n//             title={title}\r\n//             callToAction={callToAction}\r\n//             advertiser={advertiser}\r\n//             id={id}\r\n//             handleSavePost={() => toggleSave(data)}\r\n//             savedPost={isSaved(id)}\r\n//           />\r\n//         ))}\r\n//     </ul>\r\n//       {/* <ul>\r\n//         {data && data?.map((post) => (\r\n//           <Posts\r\n//             key={post.id}\r\n//             data={post}\r\n//             banners={post.banners}\r\n//             title={post.title}\r\n//             callToAction={post.callToAction}\r\n//             advertiser={post.advertiser}\r\n//             id={post.id}\r\n//             handleSavePost={() => toggleSave(post.id)}\r\n//             savedPost={isSaved(post.id)}\r\n//           />\r\n//         ))}\r\n//       </ul> */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const MainPage = () => {\r\n//   const { token } = useAuth();\r\n//   const { theme, setTheme } = useCustomContext();\r\n//   const [isScrollTop, setIsScrollTop] = useState(true);\r\n//   const [lastScrollTop, setLastScrollTop] = useState(0);\r\n//   const [posts, setPost] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n//   });\r\n\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const [savedPostId, setSavedPostId] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     setLoading(true);\r\n//     const fetchData = (async () => {\r\n//       try {\r\n//         const { data } = await getAllPostApi();\r\n\r\n//         setData(data.results);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         ToastError(\"Error! Try later\");\r\n//       }\r\n//     })();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     return localStorage.setItem(LOKAL_KEY, JSON.stringify(posts));\r\n//   }, [posts]);\r\n\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"savedPostId\", JSON.stringify(savedPostId));\r\n//   }, [savedPostId]);\r\n\r\n//   useEffect(() => {\r\n//     const handleScroll = () => {\r\n//       const scrollTop = document.documentElement.scrollTop;\r\n\r\n//       if (scrollTop < lastScrollTop) {\r\n//         setIsScrollTop(true);\r\n//       } else {\r\n//         setIsScrollTop(false);\r\n//       }\r\n//       setLastScrollTop(scrollTop <= 0 ? 0 : scrollTop);\r\n//     };\r\n//     window.addEventListener(\"scroll\", handleScroll);\r\n//     return () => {\r\n//       window.removeEventListener(\"scroll\", handleScroll);\r\n//     };\r\n//   }, [lastScrollTop]);\r\n\r\n//   const handleSavePost = async (savedId) => {\r\n//     const savedPost = data.filter(({ id }) => id === savedId);\r\n//     const savedValid = posts?.find((post) => post.id === savedId);\r\n\r\n//     if (token) {\r\n//       try {\r\n//         if (!savedValid) {\r\n//           setSavedPostId(async (prev) => {\r\n//             if (prev.includes(savedId) && !savedValid) {\r\n//               return prev.filter((postId) => postId !== savedId);\r\n//             } else {\r\n//               localStorage.setItem(\r\n//                 \"savedPostId\",\r\n//                 JSON.stringify([...prev, savedId])\r\n//               );\r\n\r\n//               const dataRes = await postSavePostApi(savedId, ...savedPost);\r\n//             }\r\n//           });\r\n//           try {\r\n//             const dataRes = await getSavePostApi();\r\n//             console.log(\"dataRes\", dataRes);\r\n\r\n//             setPost(dataRes);\r\n//             return;\r\n//           } catch (error) {\r\n//             ToastError(error.message);\r\n//           }\r\n//         }\r\n//       } catch (error) {\r\n//         ToastError(error.message);\r\n//       }\r\n//       return;\r\n//     } else if (!savedValid) {\r\n//       setSavedPostId((prev) => {\r\n//         if (prev.includes(savedId) && !savedValid) {\r\n//           return prev.filter((postId) => postId !== savedId);\r\n//         } else {\r\n//           localStorage.setItem(\r\n//             \"savedPostId\",\r\n//             JSON.stringify([...prev, savedId])\r\n//           );\r\n//           return [...prev, savedId];\r\n//         }\r\n//       });\r\n//     }\r\n\r\n//     if (posts) {\r\n//       // const savedValid = posts.find((post) => post.id === savedId);\r\n\r\n//       if (savedValid) {\r\n//         const deletePost = posts.filter((post) => post.id !== savedValid.id);\r\n\r\n//         const deletePostId = savedPostId.filter((el) => el !== savedValid.id);\r\n\r\n//         setPost(deletePost);\r\n\r\n//         setSavedPostId(deletePostId);\r\n//         ToastError(\"Post has been deleted\");\r\n//         return;\r\n//       }\r\n//       Toastify(\"Post successfully saved\");\r\n//     }\r\n\r\n//     setPost((prev) => [...prev, ...savedPost]);\r\n//   };\r\n\r\n//   // useEffect(() => {\r\n//   //   localStorage.removeItem(\"pathname\");\r\n//   // }, []);\r\n\r\n//   // const handleSetting = () => {\r\n//   //   localStorage.setItem(\"pathname\", \"/main\");\r\n//   // };\r\n\r\n//   return (\r\n//     <div className={css.main_container}>\r\n//       <ToastContainer />\r\n//       {/* <NavLink\r\n//         // to=\"setting\"\r\n//         to=\"/setting\"\r\n//       >\r\n//         <button type=\"button\" onClick={handleSetting}>\r\n//           Setting\r\n//         </button>\r\n//       </NavLink> */}\r\n\r\n//       <div\r\n//         className={`${css.logo_container} ${\r\n//           theme === \"dark\" ? css.iconDark : \"\"\r\n//         } ${isScrollTop ? css.logo_container_active : \"\"} ${\r\n//           isScrollTop && theme === \"dark\" ? css.logo_container_active_dark : \"\"\r\n//         }`}\r\n//       >\r\n//         <p className={css.logo}>NOLA</p>\r\n//       </div>\r\n//       {loading && (\r\n//         <div className=\"loader\">\r\n//           <LoaderSpiner />\r\n//         </div>\r\n//       )}\r\n//       <ul>\r\n//         {data &&\r\n//           data?.map(({ id, title, banners, callToAction, advertiser }) => (\r\n//             <Posts\r\n//               key={id}\r\n//               data={data}\r\n//               url={banners}\r\n//               title={title}\r\n//               callToAction={callToAction}\r\n//               advertiser={advertiser}\r\n//               id={id}\r\n//               handleSavePost={handleSavePost}\r\n//               savedPost={savedPostId}\r\n//             />\r\n//           ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default MainPage;\r\n"],"names":["MainPage","token","useAuth","theme","useCustomContext","postsId","setPostsId","isScrollTop","setIsScrollTop","useState","lastScrollTop","setLastScrollTop","data","setData","loading","setLoading","isSaved","toggleSave","useSavePost","useEffect","handleScroll","scrollTop","document","documentElement","window","addEventListener","removeEventListener","resp","getAllPostApi","results","ToastError","_jsxs","className","css","children","_jsx","ToastContainer","LoaderSpiner","map","post","Posts","handleSavePost","savedPost","id","elementId"],"sourceRoot":""}