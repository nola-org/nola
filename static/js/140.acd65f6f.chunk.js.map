{"version":3,"file":"static/js/140.acd65f6f.chunk.js","mappings":"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","sources":["webpack://nola/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://nola/./src/pages/SavedPostsPage/SavedPostsPage.module.css?e083","assets/icons/saved_icon.svg","pages/SavedPostsPage/SavedPostsPage.jsx","services/Toastify/Toastify.js","services/hooks/useSavePost.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__bhG2y\",\"modal\":\"Modal_modal__quYqb\",\"children\":\"Modal_children__lIYUp\",\"modal_title\":\"Modal_modal_title__v+1Yd\",\"modal_descr\":\"Modal_modal_descr__a-7tP\",\"modal_btn\":\"Modal_modal_btn__0avU-\",\"modal_text\":\"Modal_modal_text__pEPCJ\"};","import css from \"./Modal.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Modal = ({\r\n  confirm,\r\n  cancel,\r\n  title,\r\n  description,\r\n  info,\r\n  handleToggleModal,\r\n  btn_text_confirm = \"Confirm\",\r\n  btn_text_cancel = \"Cancel\",\r\n  childrenEl = false,\r\n  children,\r\n}) => {\r\n  const handleCloseBackdrop = (e) => {\r\n    const { target, currentTarget } = e;\r\n    if (target === currentTarget) {\r\n      handleToggleModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.backdrop} onClick={handleCloseBackdrop}>\r\n      <div className={`${css.modal} dark:bg-black`}>\r\n        <div className={css.children}>\r\n          {childrenEl ? (\r\n            children\r\n          ) : (\r\n            <>\r\n              <h2 className={css.modal_title}>{title}</h2>\r\n              <p className={css.modal_descr}>{description}</p>\r\n              {info ? <p className={css.modal_descr}>{info}</p> : \"\"}\r\n              <button type=\"button\" className={css.modal_btn} onClick={confirm}>\r\n                {btn_text_confirm}\r\n              </button>\r\n              <p\r\n                type=\"button\"\r\n                className={`${css.modal_text} dark:text-white`}\r\n                onClick={cancel}\r\n              >\r\n                {btn_text_cancel}\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node,\r\n  childrenEl: PropTypes.string,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  confirm: PropTypes.func,\r\n  cancel: PropTypes.func,\r\n  title: PropTypes.string,\r\n  info: PropTypes.string,\r\n  description: PropTypes.string,\r\n  btn_text_confirm: PropTypes.string,\r\n  btn_text_cancel: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"SavedPostsPage_title__fVFrK\",\"list\":\"SavedPostsPage_list__NdlYq\",\"item\":\"SavedPostsPage_item__6cIC6\",\"img\":\"SavedPostsPage_img__h4kCK\",\"item_footer\":\"SavedPostsPage_item_footer__2B8kP\",\"logo_icon\":\"SavedPostsPage_logo_icon__284ac\",\"item_description\":\"SavedPostsPage_item_description__KeAhY\",\"item_btn\":\"SavedPostsPage_item_btn__YS5tW\",\"iconDark\":\"SavedPostsPage_iconDark__JSFuK\",\"container\":\"SavedPostsPage_container__svGzl\",\"title_empty\":\"SavedPostsPage_title_empty__BzukX\",\"description\":\"SavedPostsPage_description__5NqX+\"};","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSavedIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 14,\n    height: 19,\n    viewBox: \"0 0 14 19\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 0.19043H2C0.9 0.19043 0 1.09043 0 2.19043V18.1904L7 15.1904L14 18.1904V2.19043C14 1.09043 13.1 0.19043 12 0.19043Z\",\n    fill: \"#666666\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSavedIcon);\nexport default __webpack_public_path__ + \"static/media/saved_icon.1ad2907db1b3487ea7b9246bcd25daad.svg\";\nexport { ForwardRef as ReactComponent };","import { NavLink, useLocation } from \"react-router-dom\";\r\nimport css from \"./SavedPostsPage.module.css\";\r\nimport { ReactComponent as Save_Icon } from \"../../assets/icons/saved_icon.svg\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Modal } from \"../../components/Modal/Modal\";\r\nimport { useCustomContext } from \"../../services/Context/Context\";\r\nimport {\r\n  deleteSavePostApi,\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n  postUnsavePostApi,\r\n} from \"../../services/https/https\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { useAuth } from \"../../services/hooks/useAuth\";\r\nimport { LoaderSpiner } from \"../../services/loaderSpinner/LoaderSpinner\";\r\nimport { useSavePost } from \"../../services/hooks/useSavePost\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport const SavedPostsPage = () => {\r\n  const { token } = useAuth();\r\n  const { theme } = useCustomContext();\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [modalPostId, setModalPostId] = useState(null);\r\n\r\n  const { savedPosts, isSaved, toggleSave } = useSavePost();\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      // setLoading(true);\r\n      getSavePostApi()\r\n        .then((data) => setPosts(data))\r\n        .catch(() => ToastError(\"Error loading saved posts\"))\r\n        .finally(() => setLoading(false));\r\n      return;\r\n    } else {\r\n      setPosts(savedPosts);\r\n      setLoading(false);\r\n    }\r\n  }, [token, savedPosts]);\r\n\r\n  const handleConfirmDelete = (postId) => {\r\n    toggleSave({ id: postId });\r\n\r\n    setPosts((prev) => prev.filter((p) => p.id !== postId));\r\n\r\n    // Toastify(\"Post has been deleted\");\r\n    setModalPostId(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <h1 className={css.title}>My saved</h1>\r\n      {loading && (\r\n        <div className=\"loader\">\r\n          <LoaderSpiner />\r\n        </div>\r\n      )}\r\n      {posts.length > 0 ? (\r\n        <ul className={css.list}>\r\n          {posts.map((post) => (\r\n            <li key={post.id} className={css.item}>\r\n              <NavLink to={`/main/${post.id}`}>\r\n                <img\r\n                  src={post.banners[0] || post.banners[1] || post.banners[2]}\r\n                  alt=\"\"\r\n                  className={css.img}\r\n                />\r\n              </NavLink>\r\n              <div className={css.item_footer}>\r\n                <NavLink to={`/${post.advertiser.id}`}>\r\n                  <p className={`${css.item_description} dark:text-white`}>\r\n                    {post.title}\r\n                  </p>\r\n                </NavLink>\r\n                <button\r\n                  type=\"button\"\r\n                  className={`${css.item_btn} ${\r\n                    theme === \"dark\" ? css.iconDark : \"\"\r\n                  }`}\r\n                  onClick={() => setModalPostId(post.id)}\r\n                >\r\n                  <Save_Icon />\r\n                </button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <div className={css.container}>\r\n          <h2 className={`${css.title_empty} dark:text-white`}>\r\n            This list is empty\r\n          </h2>\r\n          <p className={`${css.description} dark:text-white`}>\r\n            Add something you’ve liked from the main page\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {modalPostId && (\r\n        <Modal\r\n          title=\"Are you sure you want to delete?\"\r\n          confirm={() => handleConfirmDelete(modalPostId)}\r\n          cancel={() => setModalPostId(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const SavedPostsPage = () => {\r\n//    const { token } = useAuth();\r\n//   const location = useLocation();\r\n//   const { theme, setTheme } = useCustomContext();\r\n//   const [isModal, setIsModal] = useState(false);\r\n//   const [isDeletePost, setDeletePost] = useState(\"\");\r\n//   const [posts, setPosts] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(LOKAL_KEY));\r\n//   });\r\n//   const [savedPostId, setSavedPostId] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n//   });\r\n//   const [loading, setLoading] = useState(() =>\r\n//   { posts.length >= 0 && false }\r\n//   );\r\n\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       setLoading(true)\r\n//       if (token) {\r\n\r\n//         try {\r\n//           const dataRes = await getSavePostApi()\r\n//           setPosts(dataRes);\r\n\r\n//         } catch (error) {\r\n//          ToastError(error.message)\r\n//         } finally {\r\n//           setLoading(false)\r\n//         }\r\n//         return\r\n// }\r\n\r\n//  })()\r\n//   }, [token])\r\n\r\n//   const handleToggleModal = (message) => {\r\n//     setDeletePost(message);\r\n//     setIsModal((prev) => !prev);\r\n//   };\r\n\r\n//   const handleDeletePost = async (postId) => {\r\n//     const savedPost = posts.filter((post) => post.id !== postId);\r\n\r\n//     const deleteostId = posts.filter((post) => post.id === postId);\r\n//     const [deleteId] = deleteostId.map(({ id }) => id);\r\n//     const deletePostId = savedPostId.filter((el) => el !== deleteId);\r\n\r\n//     setPosts(savedPost);\r\n//     setSavedPostId(deletePostId);\r\n\r\n//     if (token) {\r\n//       try {\r\n// handleToggleModal();\r\n//         const dataRes = await postSavePostApi(deleteId)\r\n//         console.log(dataRes);\r\n\r\n//       } catch (error) {\r\n//         handleToggleModal();\r\n//        ToastError(error.message)\r\n//       }\r\n//       return\r\n//     }\r\n\r\n//     localStorage.setItem(\"savedPostId\", JSON.stringify(deletePostId));\r\n//     localStorage.setItem(LOKAL_KEY, JSON.stringify(savedPost));\r\n\r\n//     Toastify(\"Post has been deleted\");\r\n//     handleToggleModal();\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <ToastContainer />\r\n//       <h1 className={css.title}>My saved</h1>\r\n\r\n//       {loading && (\r\n//         <div className=\"loader\">\r\n//           <LoaderSpiner />\r\n//         </div>\r\n//       )}\r\n\r\n//       {posts?.length > 0 ? (\r\n//         <ul className={css.list}>\r\n//           {posts.map((post) => (\r\n//             <li key={post.id} className={css.item}>\r\n//               <NavLink to={`/main/${post.id}`} state={{ from: location }}>\r\n//                 <img src={post.banners[0]} alt=\"\" className={css.img} />\r\n//               </NavLink>\r\n//               <div className={css.item_footer}>\r\n//                 <NavLink to=\"/:advertiserId\" className={css.item_footer}>\r\n//                   <div>\r\n//                     <img src=\"\" alt=\"\" className={css.logo_icon} />\r\n//                   </div>\r\n\r\n//                   <p className={`${css.item_description} dark:text-white`}>\r\n//                     {post.title}\r\n//                   </p>\r\n//                 </NavLink>\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className={`${css.item_btn} ${\r\n//                     theme === \"dark\" ? css.iconDark : \"\"\r\n//                   }`}\r\n//                   onClick={\r\n//                     () => handleToggleModal(post.id)\r\n//                     // onClick={() => handleDeletePost(post.id)\r\n//                   }\r\n//                 >\r\n//                   <Save_Icon />\r\n//                 </button>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       ) : (\r\n//         <div className={css.container}>\r\n//           <h2 className={`${css.title_empty} dark:text-white`}>\r\n//             This list is empty\r\n//           </h2>\r\n//           <p className={`${css.description} dark:text-white`}>\r\n//             Add something you`ve liked from the main page\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {isModal && (\r\n//         <Modal\r\n//           handleToggleModal={handleToggleModal}\r\n//           title=\"Are you sure you want to delete?\"\r\n//           confirm={() => handleDeletePost(isDeletePost)}\r\n//           cancel={handleToggleModal}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default SavedPostsPage;\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nlet isToastActive = false;\r\n\r\nexport const Toastify = (message) => {\r\n  if (isToastActive) return;\r\n\r\n  isToastActive = true;\r\n\r\n  toast(`${message}`, {\r\n    onClose: () => {\r\n      isToastActive = false;\r\n    },\r\n    position: \"top-right\",\r\n    autoClose: 2500,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { ToastError } from \"../ToastError/ToastError\";\r\nimport {\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n  postUnsavePostApi,\r\n} from \"../https/https\";\r\nimport { Toastify } from \"../Toastify/Toastify\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport function useSavePost() {\r\n  const { token } = useAuth();\r\n\r\n  const isGuestRef = useRef(true); // ← Инициализация ref\r\n  const disabledRef = useRef(false);\r\n\r\n  const [savedPostIds, setSavedPostIds] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n  });\r\n\r\n  const [savedPosts, setSavedPosts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n  });\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  // 💡 Определяем, был ли пользователь гостем\r\n  useEffect(() => {\r\n    try {\r\n      const raw = localStorage.getItem(\"persist:auth\");\r\n      if (!raw) {\r\n        isGuestRef.current = true;\r\n        return;\r\n      }\r\n\r\n      const parsed = JSON.parse(raw);\r\n      const persistedToken = parsed.token ? JSON.parse(parsed.token) : null;\r\n\r\n      isGuestRef.current = !persistedToken;\r\n    } catch (e) {\r\n      isGuestRef.current = true;\r\n    }\r\n  }, []);\r\n\r\n  // 🔁 Синхронизация при логине или очистка при logout\r\n  useEffect(() => {\r\n    if (!token) {\r\n      if (!isGuestRef.current) {\r\n        // logout\r\n        setSavedPostIds([]);\r\n        setSavedPosts([]);\r\n\r\n        localStorage.removeItem(\"savedPostId\");\r\n        localStorage.removeItem(LOKAL_KEY);\r\n        window.location.reload();\r\n      }\r\n      localStorage.setItem(\"savedPostId\", JSON.stringify([]));\r\n      localStorage.setItem(LOKAL_KEY, JSON.stringify([]));\r\n      return;\r\n    }\r\n\r\n    // Если вошёл — синхронизируем\r\n    (async () => {\r\n      try {\r\n        const serverPosts = await getSavePostApi();\r\n        const serverIds = serverPosts.map((p) => p.id);\r\n\r\n        const localSavedPosts =\r\n          JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n        const postsToSync = localSavedPosts.filter(\r\n          (post) => !serverIds.includes(post.id)\r\n        );\r\n\r\n        for (const post of postsToSync) {\r\n          try {\r\n            await postSavePostApi(post.id, post);\r\n          } catch (err) {\r\n            console.error(`Ошибка синхронизации поста ID=${post.id}`, err);\r\n          }\r\n        }\r\n\r\n        const updatedIds = [\r\n          ...new Set([...serverIds, ...postsToSync.map((p) => p.id)]),\r\n        ];\r\n        setSavedPostIds(updatedIds);\r\n        setSavedPosts([]);\r\n\r\n        localStorage.removeItem(\"savedPostId\");\r\n        localStorage.removeItem(LOKAL_KEY);\r\n      } catch (err) {\r\n        ToastError(err?.message);\r\n      }\r\n    })();\r\n  }, [token]);\r\n\r\n  // 💾 Сохраняем в localStorage только если пользователь — гость\r\n  useEffect(() => {\r\n    if (!token && isGuestRef.current) {\r\n      localStorage.setItem(\"savedPostId\", JSON.stringify(savedPostIds));\r\n      localStorage.setItem(LOKAL_KEY, JSON.stringify(savedPosts));\r\n    }\r\n  }, [savedPostIds, savedPosts, token]);\r\n\r\n  const toggleSave = useCallback(\r\n    async (post) => {\r\n      const postId = post.id;\r\n\r\n      if (token) {\r\n        try {\r\n          if (savedPostIds.includes(postId)) {\r\n            await postUnsavePostApi(postId);\r\n            ToastError(\"Post has been deleted\");\r\n            setSavedPostIds((ids) => ids.filter((id) => id !== postId));\r\n          } else {\r\n            await postSavePostApi(postId, {});\r\n            Toastify(\"Post successfully saved\");\r\n            setSavedPostIds((ids) => [...ids, postId]);\r\n          }\r\n        } catch (err) {\r\n          ToastError(err?.message);\r\n        }\r\n      } else {\r\n        // Гость\r\n        setSavedPostIds((ids) =>\r\n          ids.includes(postId)\r\n            ? ids.filter((id) => id !== postId)\r\n            : [...ids, postId]\r\n        );\r\n\r\n        setSavedPosts((posts) => {\r\n          const exists = posts.some((p) => p.id === postId);\r\n          if (exists) {\r\n            ToastError(\"Post has been deleted\");\r\n            return posts.filter((p) => p.id !== postId);\r\n          } else {\r\n            Toastify(\"Post successfully saved\");\r\n            return [...posts, post];\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [token, savedPostIds, savedPosts]\r\n  );\r\n\r\n  const isSaved = useCallback(\r\n    (postId) => savedPostIds.includes(postId),\r\n    [savedPostIds]\r\n  );\r\n\r\n  return {\r\n    savedPostIds,\r\n    savedPosts,\r\n    isSaved,\r\n    toggleSave,\r\n    isDisabled,\r\n    setIsDisabled,\r\n  };\r\n}\r\n"],"names":["Modal","_ref","confirm","cancel","title","description","info","handleToggleModal","btn_text_confirm","btn_text_cancel","childrenEl","children","_jsx","className","css","onClick","e","target","currentTarget","_jsxs","_Fragment","type","_path","_extends","Object","assign","bind","n","arguments","length","t","r","hasOwnProperty","call","apply","SvgSavedIcon","svgRef","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","ForwardRef","SavedPostsPage","token","useAuth","theme","useCustomContext","posts","setPosts","useState","loading","setLoading","modalPostId","setModalPostId","savedPosts","isSaved","toggleSave","useSavePost","useEffect","getSavePostApi","then","data","catch","ToastError","finally","ToastContainer","LoaderSpiner","map","post","NavLink","to","src","banners","alt","advertiser","Save_Icon","handleConfirmDelete","postId","prev","filter","p","isToastActive","Toastify","message","toast","onClose","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","LOKAL_KEY","isGuestRef","useRef","savedPostIds","setSavedPostIds","_JSON$parse","JSON","parse","localStorage","getItem","setSavedPosts","_JSON$parse2","isDisabled","setIsDisabled","raw","current","parsed","persistedToken","removeItem","window","location","reload","setItem","stringify","_JSON$parse3","serverIds","postsToSync","includes","postSavePostApi","err","console","error","updatedIds","Set","useCallback","async","postUnsavePostApi","ids","some"],"sourceRoot":""}