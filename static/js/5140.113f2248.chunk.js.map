{"version":3,"file":"static/js/5140.113f2248.chunk.js","mappings":"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","sources":["webpack://nola/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","webpack://nola/./src/pages/SavedPostsPage/SavedPostsPage.module.css?e083","assets/icons/saved_icon.svg","pages/SavedPostsPage/SavedPostsPage.jsx","services/ToastError/ToastError.js","services/Toastify/Toastify.js","services/hooks/useSavePost.js","services/loaderSpinner/LoaderSpinner.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__bhG2y\",\"modal\":\"Modal_modal__quYqb\",\"children\":\"Modal_children__lIYUp\",\"modal_title\":\"Modal_modal_title__v+1Yd\",\"modal_descr\":\"Modal_modal_descr__a-7tP\",\"modal_btn\":\"Modal_modal_btn__0avU-\",\"modal_text\":\"Modal_modal_text__pEPCJ\"};","import css from \"./Modal.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Modal = ({\r\n  confirm,\r\n  cancel,\r\n  title,\r\n  description,\r\n  info,\r\n  handleToggleModal,\r\n  btn_text_confirm = \"Confirm\",\r\n  btn_text_cancel = \"Cancel\",\r\n  childrenEl = false,\r\n  children,\r\n}) => {\r\n  const handleCloseBackdrop = (e) => {\r\n    const { target, currentTarget } = e;\r\n    if (target === currentTarget) {\r\n      handleToggleModal();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.backdrop} onClick={handleCloseBackdrop}>\r\n      <div className={`${css.modal} dark:bg-black`}>\r\n        <div className={css.children}>\r\n          {childrenEl ? (\r\n            children\r\n          ) : (\r\n            <>\r\n              <h2 className={css.modal_title}>{title}</h2>\r\n              <p className={css.modal_descr}>{description}</p>\r\n              {info ? <p className={css.modal_descr}>{info}</p> : \"\"}\r\n              <button type=\"button\" className={css.modal_btn} onClick={confirm}>\r\n                {btn_text_confirm}\r\n              </button>\r\n              <p\r\n                type=\"button\"\r\n                className={`${css.modal_text} dark:text-white`}\r\n                onClick={cancel}\r\n              >\r\n                {btn_text_cancel}\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node,\r\n  childrenEl: PropTypes.string,\r\n  handleToggleModal: PropTypes.func.isRequired,\r\n  confirm: PropTypes.func,\r\n  cancel: PropTypes.func,\r\n  title: PropTypes.string,\r\n  info: PropTypes.string,\r\n  description: PropTypes.string,\r\n  btn_text_confirm: PropTypes.string,\r\n  btn_text_cancel: PropTypes.string,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"SavedPostsPage_title__fVFrK\",\"list\":\"SavedPostsPage_list__NdlYq\",\"item\":\"SavedPostsPage_item__6cIC6\",\"img\":\"SavedPostsPage_img__h4kCK\",\"item_footer\":\"SavedPostsPage_item_footer__2B8kP\",\"logo_icon\":\"SavedPostsPage_logo_icon__284ac\",\"item_description\":\"SavedPostsPage_item_description__KeAhY\",\"item_btn\":\"SavedPostsPage_item_btn__YS5tW\",\"iconDark\":\"SavedPostsPage_iconDark__JSFuK\",\"container\":\"SavedPostsPage_container__svGzl\",\"title_empty\":\"SavedPostsPage_title_empty__BzukX\",\"description\":\"SavedPostsPage_description__5NqX+\"};","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSavedIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 14,\n    height: 19,\n    viewBox: \"0 0 14 19\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 0.19043H2C0.9 0.19043 0 1.09043 0 2.19043V18.1904L7 15.1904L14 18.1904V2.19043C14 1.09043 13.1 0.19043 12 0.19043Z\",\n    fill: \"#666666\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSavedIcon);\nexport default __webpack_public_path__ + \"static/media/saved_icon.1ad2907db1b3487ea7b9246bcd25daad.svg\";\nexport { ForwardRef as ReactComponent };","import { NavLink, useLocation } from \"react-router-dom\";\r\nimport css from \"./SavedPostsPage.module.css\";\r\nimport { ReactComponent as Save_Icon } from \"../../assets/icons/saved_icon.svg\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Modal } from \"../../components/Modal/Modal\";\r\nimport { useCustomContext } from \"../../services/Context/Context\";\r\nimport {\r\n  deleteSavePostApi,\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n  postUnsavePostApi,\r\n} from \"../../services/https/https\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { useAuth } from \"../../services/hooks/useAuth\";\r\nimport { LoaderSpiner } from \"../../services/loaderSpinner/LoaderSpinner\";\r\nimport { useSavePost } from \"../../services/hooks/useSavePost\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport const SavedPostsPage = () => {\r\n  const { token } = useAuth();\r\n  const { theme } = useCustomContext();\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [modalPostId, setModalPostId] = useState(null);\r\n\r\n  const { savedPosts, isSaved, toggleSave } = useSavePost();\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      setLoading(true);\r\n      getSavePostApi()\r\n        .then((data) => setPosts(data))\r\n        .catch(() => ToastError(\"Error loading saved posts\"))\r\n        .finally(() => setLoading(false));\r\n      return;\r\n    } else {\r\n      setPosts(savedPosts);\r\n      setLoading(false);\r\n    }\r\n  }, [token, savedPosts]);\r\n\r\n  const handleConfirmDelete = (postId) => {\r\n    toggleSave({ id: postId });\r\n\r\n    setPosts((prev) => prev.filter((p) => p.id !== postId));\r\n\r\n    // Toastify(\"Post has been deleted\");\r\n    setModalPostId(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ToastContainer />\r\n      <h1 className={css.title}>My saved</h1>\r\n      {loading && (\r\n        <div className=\"loader\">\r\n          <LoaderSpiner />\r\n        </div>\r\n      )}\r\n      {posts.length > 0 ? (\r\n        <ul className={css.list}>\r\n          {posts.map((post) => (\r\n            <li key={post.id} className={css.item}>\r\n              <NavLink to={`/main/${post.id}`}>\r\n                <img\r\n                  src={post.banners[0] || post.banners[1] || post.banners[2]}\r\n                  alt=\"\"\r\n                  className={css.img}\r\n                />\r\n              </NavLink>\r\n              <div className={css.item_footer}>\r\n                <NavLink to={`/${post.advertiser.id}`}>\r\n                  <p className={`${css.item_description} dark:text-white`}>\r\n                    {post.title}\r\n                  </p>\r\n                </NavLink>\r\n                <button\r\n                  type=\"button\"\r\n                  className={`${css.item_btn} ${\r\n                    theme === \"dark\" ? css.iconDark : \"\"\r\n                  }`}\r\n                  onClick={() => setModalPostId(post.id)}\r\n                >\r\n                  <Save_Icon />\r\n                </button>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <div className={css.container}>\r\n          <h2 className={`${css.title_empty} dark:text-white`}>\r\n            This list is empty\r\n          </h2>\r\n          <p className={`${css.description} dark:text-white`}>\r\n            Add something you’ve liked from the main page\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {modalPostId && (\r\n        <Modal\r\n          title=\"Are you sure you want to delete?\"\r\n          confirm={() => handleConfirmDelete(modalPostId)}\r\n          cancel={() => setModalPostId(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const SavedPostsPage = () => {\r\n//    const { token } = useAuth();\r\n//   const location = useLocation();\r\n//   const { theme, setTheme } = useCustomContext();\r\n//   const [isModal, setIsModal] = useState(false);\r\n//   const [isDeletePost, setDeletePost] = useState(\"\");\r\n//   const [posts, setPosts] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(LOKAL_KEY));\r\n//   });\r\n//   const [savedPostId, setSavedPostId] = useState(() => {\r\n//     return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n//   });\r\n//   const [loading, setLoading] = useState(() =>\r\n//   { posts.length >= 0 && false }\r\n//   );\r\n\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       setLoading(true)\r\n//       if (token) {\r\n\r\n//         try {\r\n//           const dataRes = await getSavePostApi()\r\n//           setPosts(dataRes);\r\n\r\n//         } catch (error) {\r\n//          ToastError(error.message)\r\n//         } finally {\r\n//           setLoading(false)\r\n//         }\r\n//         return\r\n// }\r\n\r\n//  })()\r\n//   }, [token])\r\n\r\n//   const handleToggleModal = (message) => {\r\n//     setDeletePost(message);\r\n//     setIsModal((prev) => !prev);\r\n//   };\r\n\r\n//   const handleDeletePost = async (postId) => {\r\n//     const savedPost = posts.filter((post) => post.id !== postId);\r\n\r\n//     const deleteostId = posts.filter((post) => post.id === postId);\r\n//     const [deleteId] = deleteostId.map(({ id }) => id);\r\n//     const deletePostId = savedPostId.filter((el) => el !== deleteId);\r\n\r\n//     setPosts(savedPost);\r\n//     setSavedPostId(deletePostId);\r\n\r\n//     if (token) {\r\n//       try {\r\n// handleToggleModal();\r\n//         const dataRes = await postSavePostApi(deleteId)\r\n//         console.log(dataRes);\r\n\r\n//       } catch (error) {\r\n//         handleToggleModal();\r\n//        ToastError(error.message)\r\n//       }\r\n//       return\r\n//     }\r\n\r\n//     localStorage.setItem(\"savedPostId\", JSON.stringify(deletePostId));\r\n//     localStorage.setItem(LOKAL_KEY, JSON.stringify(savedPost));\r\n\r\n//     Toastify(\"Post has been deleted\");\r\n//     handleToggleModal();\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <ToastContainer />\r\n//       <h1 className={css.title}>My saved</h1>\r\n\r\n//       {loading && (\r\n//         <div className=\"loader\">\r\n//           <LoaderSpiner />\r\n//         </div>\r\n//       )}\r\n\r\n//       {posts?.length > 0 ? (\r\n//         <ul className={css.list}>\r\n//           {posts.map((post) => (\r\n//             <li key={post.id} className={css.item}>\r\n//               <NavLink to={`/main/${post.id}`} state={{ from: location }}>\r\n//                 <img src={post.banners[0]} alt=\"\" className={css.img} />\r\n//               </NavLink>\r\n//               <div className={css.item_footer}>\r\n//                 <NavLink to=\"/:advertiserId\" className={css.item_footer}>\r\n//                   <div>\r\n//                     <img src=\"\" alt=\"\" className={css.logo_icon} />\r\n//                   </div>\r\n\r\n//                   <p className={`${css.item_description} dark:text-white`}>\r\n//                     {post.title}\r\n//                   </p>\r\n//                 </NavLink>\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className={`${css.item_btn} ${\r\n//                     theme === \"dark\" ? css.iconDark : \"\"\r\n//                   }`}\r\n//                   onClick={\r\n//                     () => handleToggleModal(post.id)\r\n//                     // onClick={() => handleDeletePost(post.id)\r\n//                   }\r\n//                 >\r\n//                   <Save_Icon />\r\n//                 </button>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       ) : (\r\n//         <div className={css.container}>\r\n//           <h2 className={`${css.title_empty} dark:text-white`}>\r\n//             This list is empty\r\n//           </h2>\r\n//           <p className={`${css.description} dark:text-white`}>\r\n//             Add something you`ve liked from the main page\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {isModal && (\r\n//         <Modal\r\n//           handleToggleModal={handleToggleModal}\r\n//           title=\"Are you sure you want to delete?\"\r\n//           confirm={() => handleDeletePost(isDeletePost)}\r\n//           cancel={handleToggleModal}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default SavedPostsPage;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const ToastError = (message) => {\r\n  toast.error(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 2500,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const Toastify = (message) => {\r\n  toast(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 2500,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\nimport { ToastError } from \"../ToastError/ToastError\";\r\nimport {\r\n  getSavePostApi,\r\n  postSavePostApi,\r\n  postUnsavePostApi,\r\n} from \"../https/https\";\r\nimport { Toastify } from \"../Toastify/Toastify\";\r\n\r\nconst LOKAL_KEY = \"savedPost\";\r\n\r\nexport function useSavePost() {\r\n  const { token } = useAuth();\r\n\r\n  const [savedPostIds, setSavedPostIds] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"savedPostId\")) ?? [];\r\n  });\r\n  const [savedPosts, setSavedPosts] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(LOKAL_KEY)) ?? [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!token) return;\r\n    (async () => {\r\n      try {\r\n        const data = await getSavePostApi(); \r\n        const ids = data.map((p) => p.id);\r\n        setSavedPostIds(ids);\r\n      } catch (err) {\r\n        ToastError(err?.message);\r\n      }\r\n    })();\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (token) return;\r\n    localStorage.setItem(\"savedPostId\", JSON.stringify(savedPostIds));\r\n    localStorage.setItem(LOKAL_KEY, JSON.stringify(savedPosts));\r\n  }, [savedPostIds, savedPosts, token]);\r\n\r\n  // Переключение сохранения\r\n  const toggleSave = useCallback(\r\n    async (post) => {\r\n      const postId = post.id;\r\n\r\n      if (token) {\r\n        // Авторизованный\r\n        try {\r\n          if (savedPostIds.includes(postId)) {\r\n            await postUnsavePostApi(postId);\r\n            ToastError(\"Post has been deleted\");\r\n            setSavedPostIds((ids) => ids.filter((id) => id !== postId));\r\n          } else {\r\n            await postSavePostApi(postId, {});\r\n            Toastify(\"Post successfully saved\");\r\n            setSavedPostIds((ids) => [...ids, postId]);\r\n          }\r\n        } catch (err) {\r\n          ToastError(err?.message);\r\n        }\r\n      } else {\r\n        // Гость\r\n        setSavedPostIds((ids) =>\r\n          ids.includes(postId)\r\n            ? ids.filter((id) => id !== postId)\r\n            : [...ids, postId]\r\n        );\r\n        setSavedPosts((posts) => {\r\n          const exists = posts.some((p) => p.id === postId);\r\n          if (exists) {\r\n            ToastError(\"Post has been deleted\");\r\n            return posts.filter((p) => p.id !== postId);\r\n          } else {\r\n            Toastify(\"Post successfully saved\");\r\n            return [...posts, post];\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [token, savedPostIds, savedPosts]\r\n  );\r\n\r\n  const isSaved = useCallback(\r\n    (postId) => savedPostIds.includes(postId),\r\n    [savedPostIds]\r\n  );\r\n\r\n  return { savedPostIds, savedPosts, isSaved, toggleSave };\r\n}\r\n","import { ThreeCircles } from \"react-loader-spinner\";\r\n\r\nexport const LoaderSpiner = () => {\r\n  return (\r\n    <ThreeCircles\r\n      visible={true}\r\n      height=\"100\"\r\n      width=\"100\"\r\n      color=\"#eccd43\"\r\n      ariaLabel=\"three-circles-loading\"\r\n      wrapperStyle={{}}\r\n      wrapperClass=\"\"\r\n    />\r\n  );\r\n};\r\n"],"names":["Modal","_ref","confirm","cancel","title","description","info","handleToggleModal","btn_text_confirm","btn_text_cancel","childrenEl","children","_jsx","className","css","onClick","e","target","currentTarget","_jsxs","_Fragment","type","_path","_extends","Object","assign","bind","n","arguments","length","t","r","hasOwnProperty","call","apply","SvgSavedIcon","svgRef","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","ForwardRef","SavedPostsPage","token","useAuth","theme","useCustomContext","posts","setPosts","useState","loading","setLoading","modalPostId","setModalPostId","savedPosts","isSaved","toggleSave","useSavePost","useEffect","getSavePostApi","then","data","catch","ToastError","finally","ToastContainer","LoaderSpiner","map","post","NavLink","to","src","banners","alt","advertiser","Save_Icon","handleConfirmDelete","postId","prev","filter","p","message","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Toastify","LOKAL_KEY","savedPostIds","setSavedPostIds","_JSON$parse","JSON","parse","localStorage","getItem","setSavedPosts","_JSON$parse2","ids","err","setItem","stringify","useCallback","async","includes","postUnsavePostApi","postSavePostApi","some","ThreeCircles","visible","color","ariaLabel","wrapperStyle","wrapperClass"],"sourceRoot":""}