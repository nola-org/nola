{"version":3,"file":"static/js/173.5bac31bc.chunk.js","mappings":"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","sources":["webpack://nola/./src/pages/EditPostPage/EditPostPage.module.css?dcc4","pages/EditPostPage/EditPostPage.jsx","services/Toastify/Toastify.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn_container\":\"EditPostPage_btn_container__mlXEg\",\"btn\":\"EditPostPage_btn__iiJWb\",\"btn_active\":\"EditPostPage_btn_active__L9IGU\",\"btn_back\":\"EditPostPage_btn_back__L8v28\",\"btn_back_active\":\"EditPostPage_btn_back_active__PZts-\"};","import css from \"./EditPostPage.module.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { NavLink, useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport {\r\n  getAccountApi,\r\n  getPostApi,\r\n  getPostIdApi,\r\n  getPostIdModerationApi,\r\n  patchPostApi,\r\n  postPostApi,\r\n} from \"../../services/https/https\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { ToastError } from \"../../services/ToastError/ToastError\";\r\nimport { CreatePost } from \"../../components/CreatePost/CreatePost\";\r\nimport { Toastify } from \"../../services/Toastify/Toastify\";\r\nimport { MessagePostOnModeration } from \"../../components/MessagePostOnModeration/MessagePostOnModeration\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { LoaderSpiner } from \"../../services/loaderSpinner/LoaderSpinner\";\r\n\r\nconst EditPostPage = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [formConfig, setFormConfig] = useState(false);\r\n  const [postSuccessfullyAdded, setPostSuccessfullyAdded] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [profile, setProfile] = useState({});\r\n  const [links, setLinks] = useState(() => {\r\n    return (\r\n      // JSON.parse(localStorage.getItem(\"createPost\"))?.links ??\r\n      [{ id: nanoid(), url: \"\", name: \"\" }]\r\n    );\r\n  });\r\n  const [post, setPost] = useState(\r\n    () => {\r\n      // try {\r\n      //   const saved = localStorage.getItem(\"createPost\");\r\n      //   if (saved) return JSON.parse(saved);\r\n      // } catch (e) {\r\n      //   console.warn(\"Ошибка при чтении localStorage:\", e);\r\n      // }\r\n\r\n      return (data.length !== 0 || {\r\n        description: \"\",\r\n        title: \"\",\r\n        category: { name: \"\" },\r\n        subcategory: { name: \"\" },\r\n        callToAction: \"\" || \"Read more\",\r\n        callToActionLinks: \"\",\r\n        banners: [],\r\n      })\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      // const hasKey = localStorage.getItem(\"createPost\") !== null;\r\n      //     if (hasKey) {\r\n      //     return\r\n      //   }\r\n        \r\n      const { data } = await getAccountApi();\r\n\r\n      setProfile(data.profile_picture?.replace(\"image/upload/\", \"\"));\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // const hasKey = localStorage.getItem(\"createPost\") !== null;\r\n    const getData = (async () => {\r\n      try {\r\n        if (location.state) {\r\n          setData(location.state);\r\n          setPost(location.state);\r\n          setLinks(location.state.links);\r\n          return;\r\n        }\r\n\r\n        const { data } = await getPostIdApi(params.editPostId);\r\n\r\n        setData(data);\r\n\r\n        // if (hasKey) {\r\n        //   setLinks(JSON.parse(localStorage.getItem(\"createPost\"))?.links);\r\n        //   return\r\n        // }\r\n        \r\n        setLinks(data.links);\r\n\r\n      } catch (error) {\r\n        ToastError(error.message || \"Try again later.\");\r\n      }\r\n    })();\r\n  }, [params, post, location.state]);\r\n\r\n  const handleChangePost = ({ target }) => {\r\n    const { name, value } = target;\r\n    setPost({\r\n      ...post,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmitPost = async (e) => {\r\n    e.preventDefault();\r\n    setFormConfig(true); // delete later\r\n    try {\r\n      const res = await patchPostApi(params.editPostId, {\r\n        ...data,\r\n        category: { name: data.category.name },\r\n        subcategory: { name: data.subcategory.name },\r\n        status: \"pending\",\r\n      });\r\n\r\n      setPostSuccessfullyAdded(true);\r\n\r\n      setTimeout(() => {\r\n        navigate(\"/main\");\r\n      }, 3000);\r\n      localStorage.removeItem(\"createPost\");\r\n    } catch (error) {\r\n      ToastError(error.message || \"Try again later.\");\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    console.log(post);\r\n    navigate(\"/main/addPost/previewAdvertisemet\", {\r\n      state: {\r\n        data,\r\n        profile,\r\n        from: location.pathname,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      EditPostPage\r\n      <ToastContainer />\r\n      {/* {formConfig && (\r\n        <HandleFormConfig\r\n          message={\"Current post has been edited\"}\r\n          navigatePage={\"/main/accountAdverticer\"}\r\n        />\r\n      )} */}\r\n      {!postSuccessfullyAdded && (\r\n        <div>\r\n          {data && Object.keys(data)?.length > 0 ? (\r\n            <form onSubmit={handleSubmitPost}>\r\n              <CreatePost\r\n                post={data}\r\n                setPost={setData}\r\n                links={links}\r\n                setLinks={setLinks}\r\n              />\r\n\r\n              <div className={css.btn_container}>\r\n                {/* <NavLink to=\"/main/addPost/previewAdvertisemet\"> */}\r\n                <button\r\n                  type=\"button\"\r\n                  className={css.btn}\r\n                  onClick={handlePreview}\r\n                >\r\n                  <span className={css.btn_back}> Preview</span>\r\n                </button>\r\n                {/* </NavLink> */}\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  className={`${css.btn} ${css.btn_active}`}\r\n                >\r\n                  <span className={css.btn_back_active}>Publish</span>\r\n                </button>\r\n              </div>\r\n            </form>\r\n          ) : (\r\n            <div className=\"loader\">\r\n              <LoaderSpiner />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      {postSuccessfullyAdded && (\r\n        <MessagePostOnModeration>\r\n          Advertisement is under moderation. <br />\r\n          It will take about 15 minutes.\r\n        </MessagePostOnModeration>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPostPage;\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const Toastify = (message) => {\r\n  toast(`${message}`, {\r\n    position: \"top-right\",\r\n    autoClose: 2500,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n};\r\n"],"names":["EditPostPage","_Object$keys","location","useLocation","navigate","useNavigate","params","useParams","formConfig","setFormConfig","useState","postSuccessfullyAdded","setPostSuccessfullyAdded","data","setData","profile","setProfile","links","setLinks","id","nanoid","url","name","post","setPost","length","description","title","category","subcategory","callToAction","callToActionLinks","banners","useEffect","async","getAccountApi","_data$profile_picture","profile_picture","replace","state","getPostIdApi","editPostId","error","ToastError","message","_jsxs","children","_jsx","ToastContainer","Object","keys","onSubmit","e","preventDefault","patchPostApi","status","setTimeout","localStorage","removeItem","CreatePost","className","css","type","onClick","handlePreview","console","log","from","pathname","LoaderSpiner","MessagePostOnModeration","Toastify","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme"],"sourceRoot":""}